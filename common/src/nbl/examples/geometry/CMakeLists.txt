# TODO: let arek figure out how to redo the shaders
#[===[

# shaders IO directories
set(NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/shaders")
get_filename_component(_EXAMPLES_GEOMETRY_SPIRV_BR_BUNDLE_SEARCH_DIRECTORY_ "${CMAKE_CURRENT_BINARY_DIR}/shaders/include" ABSOLUTE)
get_filename_component(_EXAMPLES_GEOMETRY_SPIRV_BR_OUTPUT_DIRECTORY_HEADER_ "${CMAKE_CURRENT_BINARY_DIR}/builtin/include" ABSOLUTE)
get_filename_component(_EXAMPLES_GEOMETRY_SPIRV_BR_OUTPUT_DIRECTORY_SOURCE_ "${CMAKE_CURRENT_BINARY_DIR}/builtin/src" ABSOLUTE)
set(NBL_EXAMPLES_GEOMETRY_OUTPUT_SPIRV_DIRECTORY "${_EXAMPLES_GEOMETRY_SPIRV_BR_BUNDLE_SEARCH_DIRECTORY_}/nbl/examples/geometry/spirv")

# list of input source shaders
set(NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS
	# geometry creator
	"${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}/gc.basic.fragment.hlsl"
	"${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}/gc.basic.vertex.hlsl"
	"${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}/gc.cone.vertex.hlsl"
	"${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}/gc.ico.vertex.hlsl"
	
	# grid
	"${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}/grid.vertex.hlsl"
	"${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}/grid.fragment.hlsl"
)

file(GLOB_RECURSE NBL_EXAMPLES_GEOMETRY_INPUT_COMMONS CONFIGURE_DEPENDS "${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}/template/*.hlsl")

include("${NBL_ROOT_PATH}/src/nbl/builtin/utils.cmake")

foreach(NBL_INPUT_SHADER IN LISTS NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS)
	cmake_path(GET NBL_INPUT_SHADER FILENAME NBL_INPUT_SHADER_FILENAME)
	cmake_path(GET NBL_INPUT_SHADER_FILENAME STEM LAST_ONLY NBL_SHADER_STEM) # filename without .hlsl extension
	cmake_path(GET NBL_SHADER_STEM EXTENSION LAST_ONLY NBL_SHADER_TYPE) # .<shader type>
	
	set(NBL_OUTPUT_SPIRV_FILENAME "${NBL_SHADER_STEM}.spv")
	set(NBL_OUTPUT_SPIRV_PATH "${NBL_EXAMPLES_GEOMETRY_OUTPUT_SPIRV_DIRECTORY}/${NBL_OUTPUT_SPIRV_FILENAME}")

	if(NBL_SHADER_TYPE STREQUAL .vertex)
		set(NBL_NSC_COMPILE_OPTIONS -T vs_6_8 -E VSMain)
	elseif(NBL_SHADER_TYPE STREQUAL .geometry)
		set(NBL_NSC_COMPILE_OPTIONS -T gs_6_8 -E GSMain)
	elseif(NBL_SHADER_TYPE STREQUAL .fragment)
		set(NBL_NSC_COMPILE_OPTIONS -T ps_6_8 -E PSMain)
	else()
		message(FATAL_ERROR "Input shader is supposed to be <name>.<shader type>.hlsl!")
	endif()
	
	set(NBL_NSC_COMPILE_COMMAND
		"$<TARGET_FILE:nsc>"
		-Fc "${NBL_OUTPUT_SPIRV_PATH}"
		-I "${NBL_EXAMPLES_API_INCLUDE_DIRECTORY}"
		${NBL_NSC_COMPILE_OPTIONS} # this should come from shader's [#pragma WAVE <compile options>] but our NSC doesn't seem to work properly currently
		"${NBL_INPUT_SHADER}"
	)
	
	set(NBL_DEPENDS
		"${NBL_INPUT_SHADER}"
		${NBL_EXAMPLES_GEOMETRY_INPUT_COMMONS}
	)
		
	add_custom_command(OUTPUT "${NBL_OUTPUT_SPIRV_PATH}"
	   COMMAND ${NBL_NSC_COMPILE_COMMAND}
	   DEPENDS ${NBL_DEPENDS}
	   WORKING_DIRECTORY "${NBL_EXAMPLES_GEOMETRY_INPUT_SHADERS_DIRECTORY}"
	   COMMENT "Generating \"${NBL_OUTPUT_SPIRV_PATH}\""
	   VERBATIM
	   COMMAND_EXPAND_LISTS
	)
	
	list(APPEND NBL_EXAMPLES_GEOMETRY_OUTPUT_SPIRV_BUILTINS "${NBL_OUTPUT_SPIRV_PATH}")
	LIST_BUILTIN_RESOURCE(GEOMETRY_CREATOR_SPIRV_RESOURCES_TO_EMBED "geometry/spirv/${NBL_OUTPUT_SPIRV_FILENAME}")
endforeach()

ADD_CUSTOM_BUILTIN_RESOURCES(geometryCreatorSpirvBRD GEOMETRY_CREATOR_SPIRV_RESOURCES_TO_EMBED "${_EXAMPLES_GEOMETRY_SPIRV_BR_BUNDLE_SEARCH_DIRECTORY_}" "nbl" "geometry::spirv::builtin" "${_EXAMPLES_GEOMETRY_SPIRV_BR_OUTPUT_DIRECTORY_HEADER_}" "${_EXAMPLES_GEOMETRY_SPIRV_BR_OUTPUT_DIRECTORY_SOURCE_}" "STATIC" "INTERNAL")
]===]