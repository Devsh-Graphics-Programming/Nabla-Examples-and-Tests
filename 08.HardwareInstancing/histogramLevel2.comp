#version 430 core

#include "common.glsl"
layout(local_size_x = _IRR_GLSL_WORKGROUP_SIZE_) in;

shared uint scratch[_IRR_GLSL_WORKGROUP_SIZE_];
#define _IRR_GLSL_SCRATCH_SHARED_DEFINED_ scratch
#define _IRR_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ _IRR_GLSL_WORKGROUP_SIZE_
#include "shaderCommon.glsl"


layout(set = 1, binding = 0, std430) restrict readonly buffer IndirectDispatches
{
    irr_glsl_DispatchIndirectCommand_t histogramDispatch;
    irr_glsl_DispatchIndirectCommand_t expandDispatch;
    uint visibleMeshesCount;
};
layout(set = 1, binding = 2, std430) restrict readonly buffer VisibleMeshBuffersHistogramLevel1
{
    uint visibleMeshBuffersHistogramLevel1[];
};
layout(set = 1, binding = 3, std430) restrict writeonly buffer VisibleMeshBuffersHistogramLevel2
{
    uint visibleMeshBuffersHistogramLevel2[];
};


void main()
{
    const bool _active = gl_GlobalInvocationID.x<(visibleMeshesCount+_IRR_GLSL_WORKGROUP_SIZE_-1u)/_IRR_GLSL_WORKGROUP_SIZE_;

    const uint lowIndex = min((gl_GlobalInvocationID.x+1u)*_IRR_GLSL_WORKGROUP_SIZE_,visibleMeshesCount)-1u;
    uint level1Histogram = 0u;
    if (_active)
        level1Histogram = visibleMeshBuffersHistogramLevel1[lowIndex];

    const uint level2Histogram= irr_glsl_workgroupExclusiveAdd(level1Histogram);
    if (_active)
        visibleMeshBuffersHistogramLevel2[gl_GlobalInvocationID.x] = level2Histogram;
}