#version 430 core

#include "common.glsl"
layout(local_size_x = _IRR_GLSL_WORKGROUP_SIZE_) in;

shared uint scratch[_IRR_GLSL_WORKGROUP_SIZE_];
#define _IRR_GLSL_SCRATCH_SHARED_DEFINED_ scratch
#define _IRR_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ _IRR_GLSL_WORKGROUP_SIZE_
#include "shaderCommon.glsl"


layout(set = 1, binding = 0, std430) restrict readonly buffer IndirectDispatches
{
    irr_glsl_DispatchIndirectCommand_t histogramDispatch;
    irr_glsl_DispatchIndirectCommand_t expandDispatch;
    uint visibleMeshesCount;
};
layout(set = 1, binding = 2, std430) restrict readonly buffer VisibleMeshBuffersHistogramLevel1
{
    uint visibleMeshBuffersHistogramLevel1[];
};
layout(set = 1, binding = 3, std430) restrict writeonly buffer VisibleMeshBuffersHistogramLevel2
{
    uint visibleMeshBuffersHistogramLevel2[];
};


void main()
{
    const uint roundedUpLevel2Groups = (visibleMeshesCount-1u)/_IRR_GLSL_WORKGROUP_SIZE_+1u;
    const bool needsLevel2Scan = gl_GlobalInvocationID.x<roundedUpLevel2Groups;

    const uint lowIndex = min((gl_GlobalInvocationID.x+1u)*_IRR_GLSL_WORKGROUP_SIZE_,visibleMeshesCount)-1u;
    uint level1Histogram = 0u;
    if (needsLevel2Scan)
        level1Histogram = visibleMeshBuffersHistogramLevel1[lowIndex];

    const uint level2Histogram = irr_glsl_workgroupInclusiveAdd(level1Histogram);
    if (needsLevel2Scan)
        visibleMeshBuffersHistogramLevel2[gl_GlobalInvocationID.x] = level2Histogram;

    // set up indirect mesh into meshbuffer expand shader        
    if (gl_LocalInvocationIndex==_IRR_GLSL_WORKGROUP_SIZE_-1u)
    {
        const uint meshBufferCountInLevel2Block = level2Histogram+level1Histogram;
        atomicAdd(expandDispatch.num_groups_x,meshBufferCountInLevel2Block);
    }
}