#version 450

#define _NBL_GLSL_WORKGROUP_SIZE_ (1 << 8)

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

layout (set = 0, binding = 0, std430) buffer inout_buffer
{
	uint inout_values[];
};

layout(push_constant) uniform pushConstants
{
    layout (offset = 0) uint stride;
	layout (offset = 4) uint element_count;
	layout (offset = 8) uint element_count_total;
	layout (offset = 12) uint scan_op;

} pc;

#define STRIDED_IDX(i) (((i) + 1)*pc.stride-1)

#include <nbl/builtin/glsl/workgroup/shuffle.glsl>

shared uint global_offset;

uint ScanOperation(in uint a, in uint b)
{
	switch (pc.scan_op)
	{
		case (1 << 0):
			return a & b;
		case (1 << 1):
			return a ^ b;
		case (1 << 2):
			return a | b;
		case (1 << 3):
			return a + b;
		case (1 << 4):
			return a * b;
		case (1 << 5):
			return min(a, b);
		case (1 << 6):
			return max(a, b);
	}
}

void main()
{
	if (gl_LocalInvocationIndex == (_NBL_GLSL_WORKGROUP_SIZE_ - 1u))
	{
		uint idx = STRIDED_IDX(gl_GlobalInvocationID.x);
		if (idx >= pc.element_count_total)
			idx = pc.element_count_total - 1u;

		global_offset = inout_values[idx];
	}
	barrier();

	uint data = global_offset;

	if (gl_LocalInvocationIndex != 0u && (gl_GlobalInvocationID.x < pc.element_count))
	{
		uint idx = STRIDED_IDX(gl_GlobalInvocationID.x - 1u);
		if (idx >= pc.element_count_total)
			idx = pc.element_count_total - 1u;

		data = ScanOperation(data, inout_values[idx]);
	}
	barrier();

	if (gl_GlobalInvocationID.x < pc.element_count)
	{
		uint idx = STRIDED_IDX(gl_GlobalInvocationID.x);
		if (idx >= pc.element_count_total)
			idx = pc.element_count_total - 1u;

		inout_values[idx] = data;
	}


	// uint idx = STRIDED_IDX(gl_GlobalInvocationID.x);
	// 
	// if (gl_LocalInvocationIndex == (_NBL_GLSL_WORKGROUP_SIZE_ - 1u))
	// 	// This idx can go out of bounds
	// 	global_offset = inout_values[idx];
	// barrier();
	// 
	// uint data = global_offset;
	// if (gl_LocalInvocationIndex != 0u)
	// 	data = ScanOperation(data, inout_values[STRIDED_IDX(gl_GlobalInvocationID.x - 1u)]);
	// barrier();
	// 
	// inout_values[idx] = data;
}