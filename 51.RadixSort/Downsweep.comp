#version 450

#define _NBL_GLSL_WORKGROUP_SIZE_ (1 << 8)

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

layout (set = 0, binding = 0, std430) buffer inout_buffer
{
	uint inout_values[];
};

layout(push_constant) uniform pushConstants
{
    layout (offset = 0) uint stride;
} u_push_constants;

#define STRIDED_IDX(i) (((i) + 1)*u_push_constants.stride-1)

#include <nbl/builtin/glsl/workgroup/shuffle.glsl>

shared uint global_offset;

void main()
{
	uint idx = STRIDED_IDX(gl_GlobalInvocationID.x);

	// Question: Since `global_offset` needs to be added to the `data` value of each thread we need it either in each thread's private memory
	// or the workgroup's shared memory, I chose the latter.
	// Would it be better to do the former ie reading from the global memory for each thread, especially when the accesses will be
	// strided?

	if (gl_LocalInvocationIndex == (_NBL_GLSL_WORKGROUP_SIZE_ -1u))
		global_offset = inout_values[idx];
	barrier();

	uint data = global_offset;
	if (gl_LocalInvocationIndex != 0u)
		data += inout_values[STRIDED_IDX(gl_GlobalInvocationID.x - 1)];
	barrier();

	inout_values[idx] = data;
}