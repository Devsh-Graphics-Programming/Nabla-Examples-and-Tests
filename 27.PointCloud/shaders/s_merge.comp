#version 430 core
#define WG_SIZE 1024
#define SMEM_SIZE 2048
#define LC_IDX gl_LocalInvocationIndex
#define G_IDX gl_GlobalInvocationID.x

layout(local_size_x = WG_SIZE) in;

layout(std430, binding = 1) restrict readonly buffer Positions { vec4 positions[]; };
layout(std430, binding = 0) restrict buffer Vals { uint vals[]; };

layout(std140, binding = 0) uniform Control {
	vec4 camPos;
	uint size, stride;
} ctrl;

shared uint s_vals[SMEM_SIZE];

float calcKey(vec4 _p)
{
	const vec3 v = ctrl.camPos.xyz - _p.xyz;
	return dot(v, v);
}

void main()
{
	s_vals[2*LC_IDX] = vals[2*G_IDX];
	s_vals[2*LC_IDX+1] = vals[2*G_IDX+1];
	
	const uint sz = ctrl.size;
	for (uint str = WG_SIZE>>1; str > 0; str >>= 1)
	{
		memoryBarrierShared();
		barrier();
		
		if ((G_IDX ^ str) > G_IDX)
		{
			const uint v0 = s_vals[LC_IDX + str], v1 = s_vals[LC_IDX];
			const float k0 = calcKey(positions[v0]), k1 = calcKey(positions[v1]);
			
			if ((G_IDX & sz) == 0)
			{
				if (k0 < k1)
				{
					s_vals[LC_IDX] = v0;
					s_vals[LC_IDX + str] = v1;
				}	
			}
			else
			{
				if (k1 < k0)
				{
					s_vals[LC_IDX] = v0;
					s_vals[LC_IDX + str] = v1;
				}
			}
		}
	}
	
	memoryBarrierShared();
	barrier();
	
	vals[2*G_IDX] = s_vals[2*LC_IDX];
	vals[2*G_IDX+1] = s_vals[2*LC_IDX+1];
}