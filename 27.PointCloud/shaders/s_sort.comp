#version 430 core
#define G_IDX gl_GlobalInvocationID.x
#define WG_SIZE %u
#define LC_IDX gl_LocalInvocationIndex
layout(local_size_x = WG_SIZE) in;

layout(std430, binding = 0) restrict buffer Vals {
	uint vals[];
};
layout(std430, binding = 1) restrict readonly buffer Positions {
	vec4 positions[];
};

layout(std140, binding = 0) uniform Control {
	vec4 camPos;
	uint size, stride; // not used here
} ctrl;

shared uint s_vals[WG_SIZE];

float calcKey(vec4 _p)
{
	const vec3 v = ctrl.camPos.xyz - _p.xyz;
	return dot(v, v);
}

void main()
{
	s_vals[LC_IDX] = vals[G_IDX];

	for (uint sz = 2; sz <= WG_SIZE; sz <<= 1)
	{
		for (uint str = sz>>1; str > 0; str >>= 1)
		{
			memoryBarrierShared();
			barrier();
			if ((LC_IDX ^ str) > LC_IDX)
			{
				uint v0 = s_vals[LC_IDX + str], v1 = s_vals[LC_IDX];
				const float k0 = calcKey(positions[((gl_WorkGroupID.x & 1) == 1) ? v1 : v0]);
				const float k1 = calcKey(positions[((gl_WorkGroupID.x & 1) == 1) ? v0 : v1]);
				// ^^^ if wg number is odd, sort its array descending (hence ?: op)
				
				if ((LC_IDX & sz) == 0)
				{
					if (k0 < k1)
					{
						s_vals[LC_IDX] = v0;
						s_vals[LC_IDX + str] = v1;
					}	
				}
				else
				{
					if (k1 < k0)
					{
						s_vals[LC_IDX] = v0;
						s_vals[LC_IDX + str] = v1;
					}
				}
			}
		}
	}
	memoryBarrierShared();
	barrier();
	
	vals[G_IDX] = s_vals[LC_IDX];
}