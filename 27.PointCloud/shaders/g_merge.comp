#version 430 core
#define G_IDX gl_GlobalInvocationID.x

layout(local_size_x = 256) in;

layout(std430, binding = 0) restrict buffer Vals {
	uint vals[];
};
layout(std430, binding = 1) restrict readonly buffer Positions {
	vec4 positions[];
};

layout(std140, binding = 0) uniform Control {
	vec4 camPos;
	uint size, stride;
} ctrl;

float calcKey(vec4 _p)
{
	const vec3 v = ctrl.camPos.xyz - _p.xyz;
	return dot(v, v);
}

void main() {
	const uint str = ctrl.stride;
	if ((G_IDX ^ str) > G_IDX)
	{
		const uint v0 = vals[G_IDX + str], v1 = vals[G_IDX];
		const float k0 = calcKey(positions[v0]), k1 = calcKey(positions[v1]);
		if ((G_IDX & ctrl.size) == 0) 
		{
			if (k0 < k1)
			{
				vals[G_IDX + str] = v1;
				vals[G_IDX] = v0;
			}
		}
		else
		{
			if (k1 < k0)
			{
				vals[G_IDX + str] = v1;
				vals[G_IDX] = v0;
			}
		}
	}
}