#version 430 core

layout(local_size_x = 256) in;

#define LC_IDX gl_LocalInvocationIndex
#define G_IDX gl_GlobalInvocationID.x

layout(std430, binding = 0) readonly buffer IKeys { uint in_keys[]; };
layout(std430, binding = 2) writeonly buffer OKeys { uint out_keys[]; };
layout(std430, binding = 1) readonly buffer IVals { uint in_vals[]; };
layout(std430, binding = 3) writeonly buffer OVals { uint out_vals[]; };
layout(std430, binding = 4) readonly buffer Presum { uvec2 in_presum[]; };
layout(std430, binding = 6) readonly buffer Sums { uvec2 in_sums[]; };
layout(std430, binding = 5) readonly buffer Histogram { uint in_histogram[2]; };

layout(std140, binding = 0) uniform Control
{
	uint nbit;
} ctrl;

void main()
{
	const uvec2 sum = gl_WorkGroupID.x != 0 ? in_sums[gl_WorkGroupID.x - 1] : uvec2(0);
	
	uvec2 a, b;
	bool flag1 = false, flag2 = false;
	if (2*G_IDX < in_presum.length())
	{
		a = in_presum[2*G_IDX];
		flag1 = true;
	}
	if (2*G_IDX+1 < in_presum.length())
	{
		b = in_presum[2*G_IDX+1];
		flag2 = true;
	}
	
	a += sum;
	b += sum;
	
	const uint zeros = in_histogram[0];
	
	// move all indices of "ones" by amount of "zeros"
	a.y += zeros;
	b.y += zeros;
	
	memoryBarrierBuffer();
	barrier();
	
	uint k1, k2;
	if (flag1)
		k1 = in_keys[2*G_IDX];
	if (flag2)
		k2 = in_keys[2*G_IDX+1];
	
	if (flag1)
	{
		if (((k1<<ctrl.nbit)&1) == 1)
		{
			out_keys[a.y] = k1;
			out_vals[a.y] = in_vals[2*G_IDX];
		}
		else
		{
			out_keys[a.x] = k1;
			out_vals[a.x] = in_vals[2*G_IDX];
		}
	}
	if (flag2)
	{
		if (((k2<<ctrl.nbit)&1) == 1)
		{
			out_keys[b.y] = k2;
			out_vals[b.y] = in_vals[2*G_IDX+1];
		}
		else
		{
			out_keys[b.x] = k2;
			out_vals[b.x] = in_vals[2*G_IDX+1];
		}
	}
}