#version 430 core

#include "rasterizationCommon.h"
layout(local_size_x = WORKGROUP_SIZE) in;

#include <nbl/builtin/glsl/ext/MitsubaLoader/instance_data_descriptor.glsl>

#include <nbl/builtin/glsl/utils/indirect_commands.glsl>
layout(set=1, binding=0, row_major) writeonly restrict buffer PerInstancePerCamera
{
    DrawData_t data[];
} instanceDataPerCamera;
layout(set=1, binding=1, std430, row_major) restrict readonly buffer PerInstanceCull
{
    CullData_t cullData[];
};
layout(set=1, binding=2, std430) restrict coherent buffer IndirectDraws
{
    nbl_glsl_DrawElementsIndirectCommand_t draws[];
} commandBuff[2];



layout(push_constant, row_major) uniform PushConstants
{
    CullShaderData_t data;
} pc;



#include <nbl/builtin/glsl/utils/culling.glsl>
#include <nbl/builtin/glsl/utils/transform.glsl>


// base instance remains unchanged
// we just do atomic add on the instance count
void main()
{
    for (uint drawCommandGUID=gl_GlobalInvocationID.x; drawCommandGUID<pc.data.maxDrawCommandCount; drawCommandGUID+=gl_NumWorkGroups.x*WORKGROUP_SIZE)
        commandBuff[pc.data.currentCommandBufferIx^0x1u].draws[drawCommandGUID].instanceCount = 0u;

    uint batchInstanceID = gl_GlobalInvocationID.x;
    if (batchInstanceID>=pc.data.maxGlobalInstanceCount)
        return;

    // fetch instance data
    const CullData_t batchInstanceData = cullData[batchInstanceID];
    const uint batchInstanceGUID = batchInstanceData.batchInstanceGUID;

    const nbl_glsl_ext_Mitsuba_Loader_instance_data_t instanceData = InstData.data[batchInstanceGUID];
    const mat4x3 worldMatrix = instanceData.tform;
    const mat4 MVP = nbl_glsl_pseudoMul4x4with4x3(pc.data.viewProjMatrix,worldMatrix);

    // cull
    bool notCulled = true;
    if (false)
    {
        const mat2x3 bbox = mat2x3(batchInstanceData.aabbMinEdge,batchInstanceData.aabbMaxEdge);
        notCulled = nbl_glsl_couldBeVisible(MVP,bbox);
    }

    // set up MDI
    if (notCulled)
    {        
        const uint drawCommandGUID = batchInstanceData.drawCommandGUID;
        const uint drawInstanceID = commandBuff[pc.data.currentCommandBufferIx].draws[drawCommandGUID].baseInstance+
            atomicAdd(commandBuff[pc.data.currentCommandBufferIx].draws[drawCommandGUID].instanceCount,1u);
        
        instanceDataPerCamera.data[drawInstanceID].MVP = MVP;
        // use the MSB to denote if face orientation should be flipped
        instanceDataPerCamera.data[drawInstanceID].backfacingBit_batchInstanceGUID = batchInstanceGUID|((instanceData.determinantSignBit^floatBitsToUint(pc.data.viewProjDeterminant))&0x80000000u);
        instanceDataPerCamera.data[drawInstanceID].firstIndex = commandBuff[pc.data.currentCommandBufferIx].draws[drawCommandGUID].firstIndex;
    }
}