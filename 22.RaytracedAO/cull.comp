#version 430 core


#include "drawCommon.glsl"
layout(local_size_x = WORKGROUP_SIZE) in;


#include <nbl/builtin/glsl/utils/indirect_commands.glsl>
layout(set=1, binding=0, std430, row_major) restrict readonly buffer PerInstanceStatic
{
    ObjectStaticData_t staticData[];
};
layout(set=1, binding=1, row_major) writeonly restrict buffer PerInstancePerCamera
{
    DrawData_t data[];
} instanceDataPerCamera;
layout(set=1, binding=2, std430, row_major) restrict readonly buffer PerInstanceCull
{
    CullData_t cullData[];
};
layout(set=1, binding=3, std430) restrict coherent buffer IndirectDraws
{
    nbl_glsl_DrawElementsIndirectCommand_t draws[];
} commandBuff[2];



layout(push_constant, row_major) uniform PushConstants
{
    CullShaderData_t data;
} pc;



#include <nbl/builtin/glsl/utils/culling.glsl>
#include <nbl/builtin/glsl/utils/transform.glsl>


// base instance remains unchanged
// we just do atomic add on the instance count
void main()
{
    uint globalObjectID = gl_GlobalInvocationID.x;
    if (globalObjectID>=pc.data.maxObjectCount)
        return;

    const mat4x3 worldMatrix = cullData[globalObjectID].worldMatrix;
    const uint drawID = cullData[globalObjectID].drawID;

    // clear drawcount for next buffer
    commandBuff[pc.data.currentCommandBufferIx^0x1u].draws[drawID].instanceCount = 0u;

    // cull
    const mat4 MVP = nbl_glsl_pseudoMul4x4with4x3(pc.data.viewProjMatrix,worldMatrix);
    bool notCulled = true;
    if (false)
    {
        mat2x3 bbox;
        bbox[0] = cullData[globalObjectID].aabbMinEdge;
        bbox[1] = cullData[globalObjectID].aabbMaxEdge;
        notCulled = nbl_glsl_couldBeVisible(MVP,bbox);
    }

    if (notCulled)
    {        
        const uint instanceID = atomicAdd(commandBuff[pc.data.currentCommandBufferIx].draws[drawID].instanceCount,1u)+cullData[globalObjectID].baseInstance;
        
        instanceDataPerCamera.data[instanceID].MVP = MVP;
        instanceDataPerCamera.data[instanceID].detMVP = pc.data.viewProjDeterminant*staticData[globalObjectID].detWorldMatrix;
        instanceDataPerCamera.data[instanceID].objectID = globalObjectID;
    }
}