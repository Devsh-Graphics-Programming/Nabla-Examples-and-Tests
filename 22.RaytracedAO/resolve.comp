#version 430 core
#include "raytraceCommon.h"
layout(local_size_x = WORKGROUP_DIM, local_size_y = WORKGROUP_DIM) in;

layout(set = 0, binding = 0, row_major) uniform StaticViewData
{
	StaticViewData_t staticViewData;
};
layout(set = 0, binding = 1) uniform usampler2DArray accumulation;
layout(set = 0, binding = 2, rgba16f) restrict uniform image2D framebuffer;

#include <nbl/builtin/glsl/format/decode.glsl>
#include <nbl/builtin/glsl/format/encode.glsl>
vec3 fetchAccumulation(in uvec2 coord, in uint subsample)
{
	const uvec2 data = texelFetch(accumulation,ivec3(coord,subsample),0).rg;
	return nbl_glsl_decodeRGB19E7(data);
}

void main()
{
	const ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	if (all(lessThan(pixelCoord,staticViewData.imageDimensions)))
	{
		vec3 acc = fetchAccumulation(gl_GlobalInvocationID.xy,0u);
		for (uint i=1u; i<staticViewData.samplesPerPixelPerDispatch; i++)
			acc += fetchAccumulation(gl_GlobalInvocationID.xy,i);
		acc /= float(staticViewData.samplesPerPixelPerDispatch);

		imageStore(framebuffer,pixelCoord,vec4(acc,1.f));
	}
	// TODO: record autoexposure histogram
}