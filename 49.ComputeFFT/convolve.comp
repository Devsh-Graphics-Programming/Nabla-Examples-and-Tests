// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#version 430 core

#include <nbl/builtin/glsl/math/complex.glsl>

layout(local_size_x=256, local_size_y=1, local_size_z=1) in;
 
layout(set=0, binding=0) restrict readonly buffer SrcBuffer
{
	nbl_glsl_complex src_data[];
};

layout(set=0, binding=1) restrict readonly buffer KernelBuffer
{
	nbl_glsl_complex ker_data[];
};

layout(set=0, binding=2) restrict buffer OutputBuffer
{
	nbl_glsl_complex out_data[];
};

layout(push_constant) uniform PushConstants
{
    layout (offset = 0) uvec3 padded_dimension;
    layout (offset = 16) uint numSrcChannels;
} pc;

void main()
{
    // if not already normalized -> divide by power
    // float power = length(ker_data[0].complex_value);
    vec2 kerData = ker_data[gl_GlobalInvocationID.x];
    out_data[gl_GlobalInvocationID.x] =
        nbl_glsl_complex_mul(src_data[gl_GlobalInvocationID.x], kerData);
}