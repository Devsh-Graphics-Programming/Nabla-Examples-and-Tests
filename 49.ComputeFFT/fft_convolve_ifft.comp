// WorkGroup Size
#ifndef _NBL_GLSL_WORKGROUP_SIZE_
#define _NBL_GLSL_WORKGROUP_SIZE_ 256
#endif
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;

 
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/fft.glsl"

// Input Descriptor

layout(set=0, binding=0) buffer restrict InputOutputBuffer
{
	nbl_glsl_complex inoutData[];
};

layout(set=0, binding=1) restrict readonly buffer KernelBuffer
{
	nbl_glsl_complex kerData[];
};

// Get/Set Data Function
layout(push_constant) uniform PushConstants
{
	nbl_glsl_ext_FFT_Parameters_t params;
} pc;

 nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters()
 {
	 nbl_glsl_ext_FFT_Parameters_t ret;
	 ret = pc.params;
	 return ret;
 }

nbl_glsl_complex nbl_glsl_ext_FFT_getData(in uvec3 coordinate, in uint channel)
{
	nbl_glsl_complex retValue = nbl_glsl_complex(0, 0);
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	uint index = channel * (dimension.x * dimension.y * dimension.z) + coordinate.z * (dimension.x * dimension.y) + coordinate.y * (dimension.x) + coordinate.x;
	retValue = inoutData[index];
	return retValue;
}

void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getPaddedDimensions();
	uint index = channel * (dimension.x * dimension.y * dimension.z) + coordinate.z * (dimension.x * dimension.y) + coordinate.y * (dimension.x) + coordinate.x;
	inoutData[index] = complex_value;
}

nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in uvec3 coordinate, in uint channel) {

	uvec3 max_coord = nbl_glsl_ext_FFT_Parameters_t_getDimensions() - uvec3(1u);
	uvec3 clamped_coord = min(coordinate, max_coord);
	
	bool is_out_of_range = any(bvec3(coordinate!=clamped_coord));

	uint paddingType = nbl_glsl_ext_FFT_Parameters_t_getPaddingType();

	if (_NBL_GLSL_EXT_FFT_FILL_WITH_ZERO_ == paddingType && is_out_of_range) {
		return nbl_glsl_complex(0, 0);
	}
	
	return nbl_glsl_ext_FFT_getData(clamped_coord, channel);
}

void convolve(in uint item_per_thread_count, in uint ch) 
{
// TODO: decouple kernel size from image size
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	
	for(uint t=0u; t<item_per_thread_count; t++)
	{
		uint tid = gl_LocalInvocationIndex + t * _NBL_GLSL_WORKGROUP_SIZE_;
		uvec3 coords = nbl_glsl_ext_FFT_getCoordinates(tid);
		//coords &= uvec3(0xffeu);
		uint idx = ch * (dimension.x * dimension.y * dimension.z) + coords.z * (dimension.x * dimension.y) + coords.y * (dimension.x) + coords.x;
		nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_complex_mul(nbl_glsl_ext_FFT_impl_values[t],kerData[idx]);
	}
}

void main()
{
    const uint dataLength = nbl_glsl_ext_FFT_Parameters_t_getFFTLength();
    const uint item_per_thread_count = dataLength>>_NBL_GLSL_WORKGROUP_SIZE_LOG2_;
    const uint numChannels = nbl_glsl_ext_FFT_Parameters_t_getNumChannels();
	for(uint ch = 0u; ch < numChannels; ++ch)
	{
		// Load Values into local memory
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_ext_FFT_getPaddedData(nbl_glsl_ext_FFT_getCoordinates(tid),ch);
		}
		nbl_glsl_ext_FFT_preloaded(false,dataLength);
		barrier();

		convolve(item_per_thread_count,ch);
	
		barrier();
		nbl_glsl_ext_FFT_preloaded(true,dataLength);
		// write out to main memory
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			nbl_glsl_ext_FFT_setData(nbl_glsl_ext_FFT_getCoordinates(tid),ch,nbl_glsl_ext_FFT_impl_values[t]);
		}
	}
}