layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;


#include <nbl/builtin/glsl/math/complex.glsl>
// Input and Output Descriptor
layout(set=0, binding=0) buffer restrict InputOutputBuffer
{
	nbl_glsl_complex inoutData[];
};
#define _NBL_GLSL_EXT_FFT_INPUT_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_DESCRIPTOR_DEFINED_

layout(set=0, binding=1) uniform sampler2D NormalizedKernel[3];

#include "convolve_parameters.glsl"

#define inData inoutData
#define outData inoutData
#define _NBL_GLSL_EXT_FFT_MAIN_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/default_compute_fft.comp"

void convolve(in uint item_per_thread_count, in uint ch) 
{
	// TODO: decouple kernel size from image size (can't get the math to work in my head)
	for(uint t=0u; t<item_per_thread_count; t++)
	{
		const uint tid = _NBL_GLSL_WORKGROUP_SIZE_*t+gl_LocalInvocationIndex;

		// TODO: do push constants here
		uvec3 coords = nbl_glsl_ext_FFT_getCoordinates(tid);
		const uvec3 log2_size = uvec3(11u, 10u, 0u);
        coords = bitfieldReverse(coords)>>(uvec3(32u)-log2_size); // reverse_shifts

		nbl_glsl_complex sourceSpectrum = nbl_glsl_ext_FFT_impl_values[t];

        vec2 uv = (vec2(coords.xy))/vec2(uvec2(1u)<<log2_size.xy)+vec2(0.5f)/vec2(textureSize(NormalizedKernel[ch],0)); //kernel_half_pixel_size
		//
		nbl_glsl_complex convSpectrum = textureLod(NormalizedKernel[ch],uv,0).xy;
		nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_complex_mul(sourceSpectrum,convSpectrum);
	}
}

void main()
{
    const uint log2FFTSize = nbl_glsl_ext_FFT_Parameters_t_getLog2FFTSize();
    const uint item_per_thread_count = 0x1u<<(log2FFTSize-_NBL_GLSL_WORKGROUP_SIZE_LOG2_);
	
	for(uint ch=0u; ch<=nbl_glsl_ext_FFT_Parameters_t_getMaxChannel(); ++ch)
	{
		// Load Values into local memory
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_ext_FFT_getPaddedData(nbl_glsl_ext_FFT_getCoordinates(tid),ch);
		}
		nbl_glsl_ext_FFT_preloaded(false,log2FFTSize);
		barrier();

		convolve(item_per_thread_count,ch);
	
		barrier();
		nbl_glsl_ext_FFT_preloaded(true,log2FFTSize);
		// write out to main memory
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			nbl_glsl_ext_FFT_setData(nbl_glsl_ext_FFT_getCoordinates(tid),ch,nbl_glsl_ext_FFT_impl_values[t]);
		}
	}
}