#version 430 core
layout(local_size_x=256, local_size_y=1, local_size_z=1) in;
 
#include "nbl/builtin/glsl/math/complex.glsl"

layout(set=0, binding=0) restrict readonly buffer InBuffer
{
	nbl_glsl_complex in_data[];
};

layout(set=0, binding=1) restrict buffer OutBuffer
{
	nbl_glsl_complex out_data[];
};

void main()
{
	const float power = length(in_data[0]);
#if 0
	const uint k = bitfieldReverse(gl_GlobalInvocationID.x%2048u)>>21u;
	const uint l = bitfieldReverse(gl_GlobalInvocationID.x/2048u)>>21u;
	nbl_glsl_complex shift = nbl_glsl_expImaginary(-nbl_glsl_PI*float(k+l));
	//shift.x = 1.f;
	//shift.y = 0.f;
	out_data[gl_GlobalInvocationID.x] = nbl_glsl_complex_mul(in_data[gl_GlobalInvocationID.x],shift)/power;
#endif
	out_data[gl_GlobalInvocationID.x] = in_data[gl_GlobalInvocationID.x]/power;
}