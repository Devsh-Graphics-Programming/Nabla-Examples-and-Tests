#version 430 core
layout(local_size_x = 32, local_size_y = 32) in;
#define G_IDX gl_GlobalInvocationID

layout(std430, binding = 15) writeonly buffer Whatever { vec4 writePlace[]; };

layout(std140, binding = 0) uniform InstanceData
{
	struct {
		mat4 m4;
		vec3 v3;
		mat3 m3;
		float f;
	} data[10];
} instData;

#define ACCESS instData.data[G_IDX.y]
void main()
{
	
	vec4 v = ACCESS.m4 * vec4(ACCESS.f) + (ACCESS.m3 * ACCESS.v3).xxxx;
    v.x /= G_IDX.x;
    v.y += G_IDX.x;
    v.z -= G_IDX.x;
    v.w *= G_IDX.x;
    if ((float(G_IDX.x) * normalize(v).x) / 3000.f > 1.f) // never happens
        writePlace[G_IDX.x*G_IDX.y] = v;
}