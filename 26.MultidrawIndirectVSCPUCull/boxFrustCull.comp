#version 430 core
layout(local_size_x = 256) in;

#include "../common.glsl"

#include "../commonIndirect.glsl"
layout(set = 1, binding = 1, std430) restrict writeonly buffer CulledDraws
{
    DrawElementsIndirectCommand_t outDraws[];
};

layout(set = 1, binding = 2, std430) restrict coherent buffer DrawIndirect
{
	uint drawCount[2];
};

layout(set = 1, binding = 3, std430) restrict readonly buffer PossibleDraws
{
    DrawElementsIndirectCommand_t inDraws[];
};

layout(push_constant) PushConstants
{
    uint maxDrawCount;
    uint bufferSwitch;
};


void main()
{
    if (gl_GlobalInvocationID.x<maxDrawCount)
        return;

    if (gl_GlobalIncoationID.x==0u)
        drawCount[bufferSwitch^0x1u] = 0u;

    DrawElementsIndirectCommand_t draw = inDraws[gl_GlobalIncoationID.x];

    mat4 modelViewProj = irr_builtin_glsl_workaround_AMD_broken_row_major_qualifier_mat4(modelData[draw.objectUUID].MVP);

    uint outIndex = atomicAdd(drawCount[bufferSwitch],1);
    outDraws[outIndex] = draw;
}
